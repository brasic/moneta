#!/usr/bin/env ruby
# frozen_string_literal: true

require "fileutils"
require "open3"

module MemorizeMysql
  module_function

  WD = "/var/lib"
  MYSQL = "/var/lib/mysql"
  MTAB = "/etc/mtab"


  def in_memory?
    File.readlines(MTAB).any? { |line| line.include?(MYSQL) }
  end

  def current_gtid
    mysql("select @@global.gtid_executed")
  end

  def current_boot_id
    File.read("/proc/sys/kernel/random/boot_id").chomp
  end

  def ensure_in_memory
    return if in_memory?
    backup
  end

  def self.call
    ensure_in_memory

    if Process.euid != 0
      exec("sudo #{$PROGRAM_NAME}")
    end

    Dir.chdir(WD)

    run "supervisorctl stop mysql"
    tarball = nil

    if !Dir.empty?(MYSQL)
      tarball = "mysql-#{Time.now.to_i}.tar.xz"
      puts "mysql dir is nonempty, archiving it to #{tarball}"
      run "tar cJf #{tarball} #{MYSQL}"
      run "rm -r #{MYSQL}/*"
    end

    tarball ||= Dir['/var/lib/mysql*.tar.xz'].max_by { |x| File.mtime(x) }

    if !tarball
      die "could not find tarball to reinflate"
    end

    run "mount -t tmpfs -o size=5G tmpfs #{MYSQL}"
    run "tar xf #{tarball}"
    FileUtils.chown_R "mysql", "mysql", MYSQL
    FileUtils.chmod 0700,  MYSQL
    run("supervisorctl start mysql")
  end

  def self.run(cmd)
    puts "-> #{cmd}"
    system(cmd, exception: true)
  end

  def mysql(sql)
    out, err, status = Open3.capture3("mysql", "-uroot", "--skip-column-names", "-e", sql)
    raise "mysql #{sql.inspect} failed: #{err}" unless status.success?
    out.chomp
  end

  def self.die(msg)
    puts msg
    exit 1
  end
end

#if __FILE__ == $PROGRAM_NAME
#  MemorizeMysql.call
#end
require 'pry'
binding.pry
