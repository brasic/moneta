#!/usr/bin/env ruby
# frozen_string_literal: true

# vim: set filetype=ruby :

require "fileutils"
require "open3"
require "ffi-xattr"
require "base64"
require "digest"

MYSQL = "/var/lib/mysql"
MTAB = "/etc/mtab"
WD = "/var/lib"
BOOT_ID_ATTR = "user.boot_id"
GTID_ATTR = "user.gtid"

module Sudo
  def sudo(cmd, exception: true)
    puts "(sudo) -> #{cmd}"
    system("sudo #{cmd}", exception:)
  end
end

# Supervisord wrapper
class Supervisor
  include Sudo
  def initialize(name)
    @name = name
  end

  def running?
    sudo("supervisorctl status #{@name}", exception: false)
  end

  def start
    sudo("supervisorctl start #{@name}")
  end

  def stop
    sudo("supervisorctl stop #{@name}")
  end
end

def supervised_as(name)
  mod = Module.new do
    define_method(:supervisor) do
      @supervisor ||= Supervisor.new(name)
    end

    def running?
      supervisor.running?
    end

    def start
      supervisor.start
    end





    def stop
      supervisor.stop
    end
  end
  extend mod
end

module Backup
  extend Sudo

  module_function

  def path
    File.join(WD, "mysql.sql.zst")
  end

  def exist?
    File.exist?(path)
  end

  def current?
    (
      exist? &&
      attrs.get(BOOT_ID_ATTR) == current_boot_id &&
      attrs.get(GTID_ATTR) == Mysql.current_gtid
    )
  end

  def write(gtid:, &block)
    sudo("touch #{path}")
    sudo("chmod 666 #{path}")
    File.open(path, "wb", &block)
    set_attrs(gtid:)
  end

  def attrs
    Xattr.new(path)
  end

  def set_attrs(gtid:)
    attrs.set(GTID_ATTR, gtid)
    attrs.set(BOOT_ID_ATTR, current_boot_id)
  end

  def current_boot_id
    File.read("/proc/sys/kernel/random/boot_id").chomp
  end
end

# Routines to interact with mysqld
module Mysql
  module_function

  extend Sudo
  supervised_as "mysql"

  def current_gtid
    Base64.urlsafe_encode64(
      Digest::SHA2.digest(
        sql("select @@global.gtid_executed")
      )
    )
  end

  def initialize_datadir
    raise "cannot initialize on running instance" if running?
    sudo "sh -c 'sudo -u mysql mysqld --initialize-insecure'"
    sudo "chown -R mysql:mysql #{MYSQL}"
  end

  def backup
    Backup.write(gtid: current_gtid) do |backup|
      dump(to: backup)
    end
  end

  def restore
    puts(Backup.exist? ? "Restoring from #{Backup.path}" : "No backup found, your server will be empty")
    Open3.pipeline(
      %w[unzstd],
      %w[mysql -uroot],
      in: Backup.path
    )
  end

  def dump(to:)
    Open3.pipeline_r(
      %w[mysqldump -uroot --all-databases --triggers --routines --events],
      "zstd"
    ) do |from, wait_threads|
      IO.copy_stream(from, to)
      from.close
      raise "failed to backup" if wait_threads.any? { |waiter| !waiter.value.success? }
    end
  end

  def sql(sql)
    out, err, status =
      Open3.capture3("mysql", "-uroot", "--skip-column-names", "-e", sql)
    raise "mysql #{sql.inspect} failed: #{err}" unless status.success?
    out.chomp
  end
end

module Ramdisk
  extend Sudo

  module_function

  def mounted?
    File.readlines(MTAB).any? { |line| line.include?(MYSQL) }
  end

  def mount
    return if mounted?
    sudo "mount -t tmpfs -o size=5G tmpfs #{MYSQL}"
  end

  def prep_dir
    FileUtils.mkdir_p(MYSQL)
    sudo "rm -r #{MYSQL} && mkdir #{MYSQL}"
  end
end

# Utilities for working with a mysql server instance inside a ramdisk
module Moneta
  module_function

  # Run on server start to bring things to the way they were pre-shutdown
  def boot
    Ramdisk.mount
    Mysql.initialize_datadir
    Mysql.start
    Mysql.restore
  end

  def periodic_backup
    Mysql.backup unless Backup.current?
  end

  # put an existing mysql instance into a ramdisk
  def memorize
    raise "already ramdisk'd" if Ramdisk.mounted?
    raise "want running mysqld" unless Mysql.running?
    Mysql.backup
    Mysql.stop
    Ramdisk.prep_dir
    boot
  end
end

if $PROGRAM_NAME == __FILE__
  case ARGV[0]
  when "boot"
    Moneta.boot
  when "backup"
    Moneta.periodic_backup
  when "memorize"
    Moneta.memorize
  else
    puts(<<~USAGE)
      usage: #{$PROGRAM_NAME} <command>

      commands:
        boot - bring a freshly booted server online by mounting a ramdisk and restoring from backup
        backup - backup the ramdisk'd mysql if needed (intended for pre-shutdown or periodic)
                 No backup will be made if the current backup is fresh according to the gtid.
        memorize - put an existing mysql instance into a ramdisk
    USAGE
  end
end
